[
    {
        "id": 1,
        "title": "Projetos de Estruturas em Aço",
        "text": "\n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum. \n\n ![Planta de um quadrante contendo o levantamento de cargas e estruturas](/assets/posts/1/1.PNG) \n\n \n\n ![Isométrico de um pórtico metálico](/assets/posts/1/2.PNG) \n\n \n\n ![Deslocamentos de uma estrutura de telhado](/assets/posts/1/3.PNG) \n\n ![Esforços atuantes em marquise metálica](/assets/posts/1/4.PNG) \n\n \n\n ![Esforços atuantes em Pipe Rack](/assets/posts/1/5.PNG) \n\n \n\n ![Cargas atuantes em Pórtico Metálico](/assets/posts/1/6.PNG) \n\n \n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum."
    },
    {
        "id": 2,
        "title": "Pórticos Metálicos",
        "text": "\n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum. \n\n ![Isométrico de um pórtico metálico](/assets/posts/2/1.PNG) \n\n \n\n ![Vista frontal de pórtico metálico com esquematização de talhas](/assets/posts/2/2.PNG) \n\n \n\n ![Planta de um pórtico metálico de 64 metros de comprimento por 17 metros de largura](/assets/posts/2/3.PNG) \n\n ![Detalhes de fabricação de um pórtico metálico](/assets/posts/2/4.PNG) \n\n \n\n ![Fotografia de um pórtico metálico montado](/assets/posts/2/5.jpeg) \n\n \n\n ![Forografia de um pórtico metálico montado](/assets/posts/2/6.jpeg) \n\n \n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum."
    },
    {
        "id": 3,
        "title": "Estruturas Auxiliares",
        "text": "\n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum. \n\n ![Isométrico de uma estrutura auxiliar metálica](/assets/posts/3/1.PNG) \n\n \n\n ![Vista frontal e de planta de estrutura auxiliar metálica](/assets/posts/3/2.PNG) \n\n \n\n ![Fotografia de estruturas de pendural para suporte de tubulações](/assets/posts/3/3.jpeg) \n\n ![Fotografia de estrutura auxiliar metálica para apoio de talhas de KBK](/assets/posts/3/4.jpeg) \n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum."
    },
    {
        "id": 4,
        "title": "Marquises Metálicas",
        "text": "\n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum. \n\n ![Vistas de um desenho técnico de uma Marquise Metálica](/assets/posts/4/1.PNG) \n\n \n\n ![Fotografia da montagem de uma marquise metálica](/assets/posts/4/2.jpeg) \n\n \n\n ![Fotografia de uma marquise metálica montada](/assets/posts/4/3.jpeg) \n\n ![Vista de planta de um desenho técnico de uma marquise metálica](/assets/posts/4/4.PNG) \n\n \n\n ![Vista lateral de uma tesoura com içamento](/assets/posts/4/5.PNG) \n\n \n\n ![Vista Isométrica simplificada de uma marquise metálica](/assets/posts/4/6.PNG) \n\n \n\n ![Fotografia de uma pequena marquise metálica](/assets/posts/4/7.jpeg) \n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum."
    },
    {
        "id": 5,
        "title": "Mezaninos Metálicos",
        "text": "\n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum. \n\n ![Vista de planta de um mezanino metálico](/assets/posts/5/1.PNG) \n\n \n\n ![Vista frontal de um mezanino metálico](/assets/posts/5/2.PNG) \n\n \n\n ![Fotografia de uma mezanino metálico montado](/assets/posts/5/3.jpeg) \n\n ![Vista de planta de um mezanino metálico integrado a um pórtico](/assets/posts/5/4.PNG) \n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum."
    },
    {
        "id": 6,
        "title": "Salas Estruturais",
        "text": "\n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum. \n\n ![Vista isométrica simplificada de uma sala estrutural em aço](/assets/posts/6/1.PNG) \n\n \n\n ![Vista isométrica simplificada de uma sala estrutural em aço](/assets/posts/6/2.png) \n\n \n\n ![Vistas de desenho técnico de uma sala estrutural em aço](/assets/posts/6/3.png) \n\n ![Fotografia da montagem de uma sala em aço em ambiente externo](/assets/posts/6/4.jpeg) \n\n \n\n ![Fotografia de uma sala em aço montada em ambiente externo](/assets/posts/6/5.jpeg) \n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum."
    },
    {
        "id": 7,
        "title": "Telhados e Fechamentos",
        "text": "\n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum. \n\n ![Vistas de desenho técnico da estrutura metálica de cobertura de uma sala](/assets/posts/7/1.PNG) \n\n \n\n ![Fotografia interna da estrutura metálica de cobertura de uma sala ](/assets/posts/7/2.jpeg) \n\n \n\n ![Vista Isométrica de estrutura metálica de cobertura de uma sala](/assets/posts/7/3.PNG) \n\n \n\n ![Vista de fechamento lateral da cobertura de uma sala](/assets/posts/7/4.PNG) \n\n \n\n ![Fotografia do fechamento de telhas da cobertura de uma sala](/assets/posts/7/5.jpeg) \n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum."
    },
    {
        "id": 8,
        "title": "Escadas Metálicas",
        "text": "\n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum. \n\n ![Vista frontal de um desenho técnico de uma escada metálica](/assets/posts/8/1.PNG) \n\n \n\n ![Fotografia de uma escada metálica pintada](/assets/posts/8/2.jpeg) \n\n \n\n ![Fotografia de uma escada metálica galvanizada a frio](/assets/posts/8/3.jpeg) \n\n \n\n ![Fotografia de uma escada metálica galvanizada a quente](/assets/posts/8/4.PNG) \n\n \n\n ![Isométrico simplificado de uma escada marinheiro](/assets/posts/8/5.png) \n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum."
    },
    {
        "id": 9,
        "title": "Pipe Rack",
        "text": "\n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum. \n\n ![Vistas de planta e frontal de um desenho técnico de uma pipe rack](/assets/posts/9/1.PNG) \n\n \n\n ![Fotografia de um pipe rack montado](/assets/posts/9/2.jpeg) \n\n \n\n ![Vistas de planta e frontal de um desenho técnico de uma pipe rack](/assets/posts/9/3.png) \n\n \n\n ![Fotografia de um pipe rack montado](/assets/posts/9/4.jpeg) \n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum."
    },
    {
        "id": 10,
        "title": "Utilidades",
        "text": "\n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum. \n\n ![Vistas de um desenho técnico de um suporte metálico para bomba de óleo](/assets/posts/10/1.PNG) \n\n \n\n ![Fotografia de um suporte metálico para bomba de óleo](/assets/posts/10/2.jpeg) \n\n \n\n ![Vistas de um desenho técnico de um suporte metálico para controles da linha](/assets/posts/10/3.png) \n\n \n\n ![Fotografia de um suporte metálico](/assets/posts/10/4.jpeg) \n\n \n\n ![Vista Isométrica de um suporte articulado para luminária](/assets/posts/10/5.png) \n\n \n\n ![Fotografia de um suporte articulado para luminária](/assets/posts/10/6.jpg) \n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum faucibus nisl augue, a fringilla ipsum egestas pellentesque. Vestibulum accumsan feugiat porttitor. Proin vehicula quis ligula sed consequat. Sed sodales ut augue a venenatis. Ut venenatis fermentum tincidunt. Phasellus lorem leo, tincidunt id lacus id, placerat varius odio. Cras sollicitudin lectus non mollis condimentum. \n\n> Dica: utilize o REPL para testar os exemplos deste artigo! \n\n \n\nAgora que você entende como funciona o Svelte e o quão performático ele é, vamos compará-lo com o React, com alguns exemplos de código! \n\n \n\n## Comparação de código Svelte vs React \n\n \n\n### Estrutura de um componente \n\n \n\nVamos considerar o seguinte código React: \n\n \n\n``` \n\nimport './App.css'; \n\nimport { useState } from 'react'; \n\n \n\nfunction App() { \n\n  const [nome, setNome] = useState('World'); \n\n \n\n  return ( \n\n<div className=\"App\"> \n\n<h1>Hello {nome}!</h1> \n\n</div> \n\n  ); \n\n} \n\n \n\nexport default App; \n\n``` \n\n \n\nCom o Svelte, o mesmo código acima ficaria assim: \n\n \n\n``` \n\n<script> \n\nlet nome = 'World'; \n\n</script> \n\n \n\n<main> \n\n<h1>Hello {nome}!</h1> \n\n</main> \n\n \n\n<style> \n\nmain { \n\n/* estilos de main */ \n\n} \n\n \n\nh1 { \n\n/* estilos de h1 */ \n\n} \n\n</style> \n\n``` \n\n \n\nO Svelte utiliza a estrutura **Single File Component** (Componente de Arquivo Único), onde deixamos HTML, CSS e JS em um mesmo arquivo com extensão `.svelte`. Vemos no exemplo acima que o JS fica dentro da tag `<script>`, o CSS dentro da `<style>` e o HTML não precisa ser delimitado por alguma tag. Além disso, essas partes podem vir em qualquer ordem, então o código abaixo também é válido: \n\n \n\n``` \n\n<style> \n\nh1 { \n\n/* estilos de h1 */ \n\n} \n\n</style> \n\n \n\n<h1>Hello {nome}!</h1> \n\n<p> \n\nMinha primeira aplicação Svelte! \n\n</p> \n\n \n\n<script> \n\nlet nome = 'World'; \n\n</script> \n\n``` \n\n \n\nNote também que o HTML do componente não precisa ser envolto por uma tag, como no exemplo acima, que utilizamos as tags `<h1>` e `<p>`. \n\n \n\n### Estado \n\n \n\nEm React, para criarmos um estado, precisamos explicitá-lo no código utilizando `useState`. Já no Svelte, qualquer variável que criamos com a palavra-chave `let` se torna um estado por padrão. \n\n \n\nAinda, em React, se quisermos alterar o estado `nome` para um novo valor no clique de um botão, podemos escrever o seguinte: \n\n \n\n``` \n\n<button onClick={() => setNome('Antônio')} disabled={nome === 'Antônio'}> \n\nAlterar nome \n\n</button> \n\n``` \n\n \n\nO código acima ficaria assim em Svelte: \n\n \n\n``` \n\n<button on:click={() => nome = 'Antônio'} disabled={nome === 'Antônio'}> \n\nAlterar nome \n\n</button> \n\n``` \n\n \n\nRepare que utilizamos a diretiva [on:](https://svelte.dev/tutorial/dom-events) para escutar o evento de `click` do botão. Note também que precisamos apenas fazer uma atribuição direta ao estado `nome`, e a interface do componente será re-renderizada de acordo com a mudança. Trata-se de uma sintaxe intuitiva e prática, especialmente, quando trabalhamos com objetos e arrays. \n\n \n\n> Diretivas são como “atributos especiais” que colocamos em tags do HTML. Elas já são conhecidas em Angular e Vue.js, e são um recurso poderoso, que podem nos ajudar de diversas formas no nosso desenvolvimento. \n\n \n\n### Two-way data binding \n\n \n\nVamos criar um input que altera o estado `nome` que criamos no código React, utilizando a função `setNome`: \n\n \n\n``` \n\n<input \n\ntype=\"text\" \n\nvalue={nome} \n\nonChange={(e) => setNome(e.target.value)}   \n\n/> \n\n``` \n\n \n\nNote que precisamos declarar o atributo `value={nome}` para que o estado defina o valor inicial do campo, e também declarar o atributo `onChange={(e) => setNome(e.target.value)}` para que as alterações no campo alterem o estado também. \n\n \n\nNo Svelte, podemos simplificar essas operações utilizando a seguinte sintaxe: \n\n \n\n``` \n\n<input type=\"text\" bind:value={nome} /> \n\n``` \n\n \n\nUsamos a diretiva [bind:](https://svelte.dev/tutorial/text-inputs) para fazer um **Two-way data binding** (Ligação de dados bidirecional) que, nesse caso, serve para **ligar** (ou **vincular**) um atributo do HTML a um estado. Dessa forma, o atributo `value` e o estado `nome` sempre possuirão o mesmo valor. \n\n \n\n### Estilos escopados \n\n \n\nNo React, por padrão, os estilos não são escopados, ou seja, se arquivos CSS declararem estilos para um mesmo seletor, esses estilos irão interferir entre si. Soluções possíveis são utilizar módulos CSS ou Styled Components. \n\n \n\nJá no Svelte, os estilos são [**escopados por padrão**](https://svelte.dev/docs#component-format-style), pois esse é o comportamento que geralmente queremos. Se, por acaso, precisarmos que algum estilo seja global para todos os componentes, podemos escrever a seguinte sintaxe: \n\n \n\n``` \n\n:global(h1) { \n\n/* estilos de h1 */ \n\n} \n\n``` \n\n \n\nUtilizamos o modificador `:global()` e, dentro dos parênteses, colocamos o seletor CSS que queremos globalizar. \n\n \n\n### Estrutura de condição \n\n \n\nNo React, combinamos o JS com JSX para renderizar HTML de forma condicional, como nesse código: \n\n \n\n``` \n\n{ \n\nnome === 'Antônio' \n\n? <p>É meu nome!</p> \n\n: <p>Não é meu nome...</p> \n\n} \n\n``` \n\n \n\nDiferentemente, no Svelte, temos uma estrutura dedicada para essas situações, e o código ficaria assim: \n\n \n\n``` \n\n{#if nome === 'Antônio'} \n\n<p>É meu nome!</p> \n\n{:else} \n\n<p>Não é meu nome...</p> \n\n{/if} \n\n``` \n\n \n\nEsse é o bloco [#if](https://svelte.dev/tutorial/if-blocks) do Svelte, e pode ser utilizado, opcionalmente, com cláusulas `:else if` e `:else`. \n\n \n\n### Estrutura de repetição \n\n \n\nEm React, podemos combinar o JS com JSX para iterar sobre alguma lista e renderizar HTML de acordo com ela. Considere que temos um estado chamado `numeros`, que é um array do JavaScript. Para imprimir um parágrafo para cada item do array, faríamos algo assim: \n\n \n\n``` \n\n{numeros.map((numero) => ( \n\n<p>Número: {numero}</p> \n\n))} \n\n``` \n\n \n\nJá no Svelte, temos um estrutura dedicada para esses casos, e nosso código ficaria assim:  \n\n \n\n``` \n\n{#each numeros as numero} \n\n<p>Número: {numero}</p> \n\n{/each} \n\n``` \n\n \n\nEsse é o bloco [#each](https://svelte.dev/tutorial/else-blocks) do Svelte e ele pode até ser utilizado junto com uma cláusula `:else`, que mostra um HTML caso a lista esteja vazia. \n\n \n\n> Note que esses blocos especiais sempre começam com `#`, “continuam” com `:` (quando há cláusulas) e terminam em `/`. \n\n \n\n### Código reativo \n\n \n\nÀs vezes, no nosso código, é útil guardar valores que dependem de algum estado do componente. Em React, logo após a declaração do estado `nome`, poderíamos adicionar o seguinte código: \n\n \n\n``` \n\nconst meuNome = nome === 'Antônio'; \n\n``` \n\n \n\nAssim, podemos utilizar `meuNome` no botão e no condicional: \n\n \n\n``` \n\n<button onClick={() => setNome('Antônio')} disabled={meuNome}> \n\nAlterar nome \n\n</button> \n\n \n\n{ \n\nmeuNome \n\n? <p>É meu nome!</p> \n\n: <p>Não é meu nome...</p> \n\n} \n\n``` \n\n \n\nDessa forma, evitamos repetição de código, além de aumentarmos a legibilidade e a facilidade de manutenção. Entretanto, o código `const meuNome = nome === 'Antônio';` é executado sempre que o componente é re-renderizado, mesmo que essa renderização tenha sido causada por um estado que não fosse `nome`. \n\n \n\nPor outro lado, no Svelte, todo o código dentro da tag `<script>` é executado uma única vez, quando o componente é renderizado pela primeira vez na tela. Então, como faríamos para replicar a situação acima? \n\n \n\nNa tag `<script>`, podemos adicionar o seguinte código: \n\n \n\n``` \n\n$: meuNome = nome === 'Antônio'; \n\n``` \n\n \n\nAssim, no HTML, podemos utilizar `meuNome`: \n\n \n\n``` \n\n<button on:click={() => nome = 'Antônio'} disabled={meuNome}> \n\nAlterar nome \n\n</button> \n\n \n\n{#if meuNome} \n\n<p>É meu nome!</p> \n\n{:else} \n\n<p>Não é meu nome...</p> \n\n{/if} \n\n``` \n\n \n\nA sintaxe [$:](https://svelte.dev/tutorial/reactive-statements) indica que um código deve ser reativo! O Svelte identifica quais estados estão sendo utilizados nessa sintaxe e executa o código quando algum desses estados é alterado. Assim, `meuNome = nome === 'Antônio'` é executado somente quando o estado `nome` for alterado. \n\n \n\n> Se você já trabalhou com Vue.js, talvez tenha lembrado das *computed properties* (propriedades computadas). De fato, a “sintaxe de dólar” funciona praticamente da mesma forma. \n\n \n\n### E não para por aí… \n\n \n\nFizemos a comparação entre conceitos fundamentais do Svelte e do React, mas ainda levaríamos vários artigos para cobrirmos mais diferenças importantes! Algumas delas: \n\n \n\n- **Comunicação entre componentes**: no React, a comunicação básica entre componentes se dá de forma unidirecional e sempre do pai para o filho, através de props. Já o Svelte fornece várias opções pra gente, como props, [dispatch](https://svelte.dev/tutorial/component-events) (filho para o pai) e [bind](https://svelte.dev/tutorial/component-bindings) (comunicação bidirecional). \n\n \n\n- **Composição de componentes**: no React, para passarmos conteúdos mais complexos para um componente filho, podemos utilizar `children`. No Svelte, utilizamos o [`slot`](https://svelte.dev/tutorial/slots), que nos dá uma grande variedade de recursos, como definir um conteúdo padrão (*fallback*), configurar o recebimento de mais de um conteúdo (*named slots*), entre outros. \n\n \n\n- **Métodos de ciclo de vida**: na abordagem funcional do React, o controle dos ciclos de vida de um componente é unificado no hook `useEffect()`. O Svelte prefere separar essas responsabilidades em [diferentes métodos](https://svelte.dev/tutorial/onmount): `onMount()`, `beforeUpdate()`, `afterUpdate()` e `onDestroy()`. Mas também temos a opção de retornar uma função para o método `onMount()`, e ela será executada quando o componente for destruído, ou seja, como se ela estivesse no método `onDestroy()`. \n\n \n\n- **Gerenciamento de estado**: no React, podemos optar pela solução nativa, a Context API, ou alguma biblioteca externa, como Redux. No Svelte, temos duas soluções nativas: as [Stores](https://svelte.dev/tutorial/writable-stores), para gerenciamento de estado global, e uma [Context API](https://svelte.dev/tutorial/context-api) também, para casos mais específicos. \n\n \n\n## Resumindo, Svelte é melhor que React? \n\n \n\nApesar de todos os benefícios citados, o Svelte ainda é uma **tecnologia em ascensão**, e não possui tantas oportunidades de emprego quanto seus concorrentes. \n\n \n\nPor outro lado, ele já é utilizado por empresas como Spotify, The New York Times, Avast, Philips, e outras, como podemos ver na [página principal do Svelte](https://svelte.dev/) e [nessa página da extensão Wappalyzer](https://www.wappalyzer.com/technologies/javascript-frameworks/svelte), que analisa quais sites utilizam determinada tecnologia. \n\n O React ainda lidera o mercado e as vagas de emprego. Mas nós, pessoas desenvolvedoras front-end, devemos sempre nos manter atualizadas de novas tecnologias, principalmente, quando possuem um grande potencial de crescimento, como o Svelte. Além disso, estudar diferentes ferramentas front-end é uma excelente forma de reforçar conceitos e de apurar nosso senso crítico, fazendo-nos questionar as decisões que foram tomadas na construção de uma determinada tecnologia. \n\n \n\nPara conferir todos os recursos do Svelte citados neste artigo, você pode visitar o [tutorial](https://svelte.dev/tutorial/basics) ou a [documentação](https://svelte.dev/docs).  \n\n \n\nConfira também esse Hipster Ponto Tube: [Como trabalhar com Framework SVELTE? Com Mario Souto](https://www.youtube.com/watch?v=1F7r0G0hFcE). \n\n"
    }
]